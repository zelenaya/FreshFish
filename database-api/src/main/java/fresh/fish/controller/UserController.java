package fresh.fish.controller;

import fresh.fish.domain.jdbc_template.User;
import fresh.fish.repository.jdbc_template.RoleDao;
import fresh.fish.repository.jdbc_template.UserDao;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin
@RequestMapping(value = "/rest/users")
public class UserController {

    @Autowired
    @Qualifier("userDaoImpl")
    private UserDao userDao;


    @Autowired
    private RoleDao roleDao;

    @ApiOperation(value = "Get all users from DB")
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<User>> getUsers() {
        return new ResponseEntity<>(userDao.findAll(), HttpStatus.OK);
    }


    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", dataType = "integer", paramType = "query",
                    value = "Results page you want to retrieve (0..N)"),
            @ApiImplicitParam(name = "size", dataType = "integer", paramType = "query",
                    value = "Number of records per page."),
            @ApiImplicitParam(name = "sort", allowMultiple = true, dataType = "string", paramType = "query",
                    value = "Sorting criteria in the format: property(,asc|desc). " +
                            "Default sort order is ascending. " +
                            "Multiple sort criteria are supported.")
    })

    @ApiOperation(value = "Get user from DB by id")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful getting user"),
            @ApiResponse(code = 400, message = "Invalid User ID supplied"),
            @ApiResponse(code = 401, message = "Lol kek"),
            @ApiResponse(code = 404, message = "User was not found"),
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public ResponseEntity<User> getUserById(@ApiParam("User Path Id") @PathVariable Long id) {
        User user = userDao.findById(id);
        return new ResponseEntity<>(user, HttpStatus.OK);
    }

    /**/
//    @PostMapping
//    @Transactional
//    @ResponseStatus(HttpStatus.CREATED)
//    public ResponseEntity<User> createUser(@RequestBody UserCreateRequest request) {
//        User user = new User();
//        //userID is empty - will be generated by DB
//        user.setLogin(request.getLogin());
//        user.setPassword(request.getPassword());
//
//        User savedUser = userDao.save(user);
//        roleDao.save(new Role(savedUser.getUserId(), "ROLE_USER"));
//
//        return new ResponseEntity<>(savedUser, HttpStatus.OK);
//    }

//    @ApiOperation(value = "Update user by userID")
//    @ApiResponses({
//            @ApiResponse(code = 200, message = "Successful user update"),
//            @ApiResponse(code = 400, message = "Invalid User ID supplied"),
//            @ApiResponse(code = 404, message = "User was not found"),
//            @ApiResponse(code = 500, message = "Server error, something wrong")
//    })
//    @ApiImplicitParams({
//            @ApiImplicitParam(name = "X-Auth-Token", value = "token", required = true, dataType = "string", paramType = "header")
//    })
//    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
//    @ResponseStatus(HttpStatus.OK)
//    public ResponseEntity<User> updateUser(@PathVariable("id") Long userId,
//                                           @RequestBody UserCreateRequest request) {
//        User user = userDao.findById(userId);
//        user.setLogin(request.getLogin());
//        user.setPassword(request.getPassword());
//
//        return new ResponseEntity<>(user, HttpStatus.OK);
//    }

    @ApiOperation(value = "You can delete user from DB by id, but not to do it")
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Long> deleteUser(@PathVariable("id") Long userId) {
        userDao.delete(userId);
        return new ResponseEntity<>(userId, HttpStatus.OK);
    }
}
